{
  "id": 33,
  "title": "Chương 33",
  "verses": [
    {
      "text": [
        "Biết người là trí tuệ.",
        "Biết mình là minh triết.",
        "Điều khiển người cần sức mạnh.",
        "Điều khiển mình cần sức thật sự."
      ]
    },
    {
      "text": [
        "Hài lòng mang lại sự giàu có.",
        "Kỷ luật cho phép kiên trì.",
        "Người ở lại trung tâm bền bỉ.",
        "Người chết mà không diệt,",
        "trường tồn vĩnh hằng."
      ]
    },
    {
      "text": [
        "## Chú thích"
      ]
    },
    {
      "text": [
        "Chương này khám phá **nghịch lý giữa ngoại lực và nội lực** trong lập trình:",
        "- **\"Biết người\"**: Hiểu công nghệ đối thủ (competitor analysis) và xu hướng thị trường (tech trend research).",
        "- **\"Biết mình\"**: Đánh giá năng lực team qua **retrospective meetings**, hiểu rõ limitations của codebase.",
        "- **\"Điều khiển người\"**: Sử dụng **code reviews** và **coding standards** để duy trì consistency.",
        "- **\"Điều khiển mình\"**: Kỷ luật **TDD** (Test-Driven Development) và **timeboxing** để tránh rabbit holes."
      ]
    },
    {
      "text": [
        "\"Hài lòng\" thể hiện qua **YAGNI principle** - chỉ implement đủ dùng. \"Kỷ luật\" là cam kết với **refactoring schedule** dù deadline cận kề. \"Trung tâm\" là **core business logic** - phần quan trọng nhất cần tối ưu và bảo vệ."
      ]
    },
    {
      "text": [
        "\"Người chết mà không diệt\" ám chỉ **legacy code** được tái sinh qua **strangler pattern**, trở thành phần vĩnh cửu của hệ thống. Đây là cách \"trường tồn\" thực sự trong software engineering - không phải bằng sự cứng nhắc, mà qua khả năng **evolutionary architecture**."
      ]
    }
  ]
}